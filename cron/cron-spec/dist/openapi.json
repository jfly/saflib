{
  "openapi": "3.0.0",
  "info": {
    "title": "Cron Service API",
    "version": "1.0.0",
    "description": "API specification for the cron service"
  },
  "servers": [
    {
      "url": "http://cron.docker.localhost/",
      "description": "Development server"
    }
  ],
  "paths": {
    "/cron/jobs": {
      "get": {
        "summary": "List all cron jobs",
        "operationId": "listCronJobs",
        "tags": [
          "cron"
        ],
        "security": [
          {
            "scopes": [
              "cron:read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cron jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/job_settings"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires cron:read).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/cron/jobs/settings": {
      "put": {
        "summary": "Update settings for a specific cron job by name",
        "operationId": "updateCronJobSettings",
        "tags": [
          "cron"
        ],
        "security": [
          {
            "scopes": [
              "cron:write"
            ]
          }
        ],
        "requestBody": {
          "description": "The job name and settings to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobName": {
                    "type": "string",
                    "description": "The name of the job to update."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Set whether the job is enabled."
                  }
                },
                "required": [
                  "jobName",
                  "enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job settings updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/job_settings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions (requires cron:write).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Job setting with the specified name not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "scopes": {
        "type": "apiKey",
        "in": "header",
        "name": "X-User-Scopes",
        "description": "Comma-separated list of user scopes"
      }
    },
    "schemas": {
      "JobSettings": {
        "$ref": "#/components/schemas/job_settings"
      },
      "job_settings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique identifier for the job setting."
          },
          "jobName": {
            "type": "string",
            "description": "The unique name of the cron job."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the job is enabled to run."
          },
          "lastRunAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp of the last time the job ran."
          },
          "lastRunStatus": {
            "type": "string",
            "enum": [
              "success",
              "fail",
              "running",
              "timed out",
              null
            ],
            "nullable": true,
            "description": "Status of the last job run."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp when the job setting was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp when the job setting was last updated."
          }
        },
        "required": [
          "jobName",
          "enabled"
        ]
      },
      "error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "A short, machine-readable error code, for when HTTP status codes are not sufficient."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description of the error.",
            "example": "The requested resource could not be found."
          }
        }
      }
    }
  }
}