/**
 * Environment variables for the `@saflib/identity-rpcs` package, including inherited variables.
 * Generated by `@saflib/env`. To update, make changes to the adjacent `env.schema.json`, navigate to the package root, and run `npm exec saf-env generate`.
 */

export interface IdentityRpcsEnvSchema {
  /**
   * Whether to allow the creation of new databases. Useful for ensuring existing production environments don't inadvertently create new databases.
   */
  ALLOW_DB_CREATION?: "true" | "false";
  /**
   * Comma-separated list of client subdomains, e.g. 'www,app,auth,'. Include an empty string (such as in the example) to indicate there's a client for the root domain.
   */
  CLIENT_SUBDOMAINS: string;
  /**
   * The name of the deployment, e.g. 'production', 'staging', 'development'. This may be used in strings such as database file names and logging metadata; each deployment should have a unique name.
   */
  DEPLOYMENT_NAME: string;
  /**
   * The root domain of the deployment, e.g. 'saf.com'.
   */
  DOMAIN: string;
  /**
   * Comma-separated list of domains to redirect to the root domain, e.g. 'old-subdomain1.saf.com,old-subdomain2.saf.com'.
   */
  DOMAIN_REDIRECTS?: string;
  /**
   * The port on which the gRPC server will listen, or the client will connect.
   */
  IDENTITY_SERVICE_GRPC_PORT: string;
  /**
   * Host URL for the identity service
   */
  IDENTITY_SERVICE_HOST: string;
  /**
   * Whether to mock 3rd party integrations. Set to 'true' to mock. And integration packages should respect this setting.
   */
  MOCK_INTEGRATIONS?: "true" | "false";
  /**
   * The environment of the deployment. Generally should avoid using this, consider its use deprecated, prefer instead more specific environment variables.
   */
  NODE_ENV: "development" | "production" | "test";
  /**
   * The protocol of the deployment, e.g. 'https'
   */
  PROTOCOL: "https" | "http";
  /**
   * Comma-separated list of service subdomains, e.g. 'revenue,geo,identity,core'.
   */
  SERVICE_SUBDOMAINS: string;
  /**
   * The timezone of the deployment, e.g. 'America/New_York'. Must be UTC.
   */
  TZ: "UTC";
}

/**
 * `process.env` casted to the `IdentityRpcsEnvSchema` type.
 */
export const typedEnv = (globalThis.process
  ? process.env
  : {}) as unknown as IdentityRpcsEnvSchema;
