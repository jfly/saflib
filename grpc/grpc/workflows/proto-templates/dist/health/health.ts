// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: health/health.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "@saflib/grpc-specs";
import * as dependency_2 from "./../google/protobuf/timestamp.ts";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class __ServiceName__HealthCheckRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        auth?: dependency_1.SafAuth;
        request?: dependency_1.SafRequest;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("auth" in data && data.auth != undefined) {
                this.auth = data.auth;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
        }
    }
    get auth() {
        return pb_1.Message.getWrapperField(this, dependency_1.SafAuth, 1) as dependency_1.SafAuth;
    }
    set auth(value: dependency_1.SafAuth) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_auth() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get request() {
        return pb_1.Message.getWrapperField(this, dependency_1.SafRequest, 2) as dependency_1.SafRequest;
    }
    set request(value: dependency_1.SafRequest) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        auth?: ReturnType<typeof dependency_1.SafAuth.prototype.toObject>;
        request?: ReturnType<typeof dependency_1.SafRequest.prototype.toObject>;
    }): __ServiceName__HealthCheckRequest {
        const message = new __ServiceName__HealthCheckRequest({});
        if (data.auth != null) {
            message.auth = dependency_1.SafAuth.fromObject(data.auth);
        }
        if (data.request != null) {
            message.request = dependency_1.SafRequest.fromObject(data.request);
        }
        return message;
    }
    toObject() {
        const data: {
            auth?: ReturnType<typeof dependency_1.SafAuth.prototype.toObject>;
            request?: ReturnType<typeof dependency_1.SafRequest.prototype.toObject>;
        } = {};
        if (this.auth != null) {
            data.auth = this.auth.toObject();
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_auth)
            writer.writeMessage(1, this.auth, () => this.auth.serialize(writer));
        if (this.has_request)
            writer.writeMessage(2, this.request, () => this.request.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): __ServiceName__HealthCheckRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new __ServiceName__HealthCheckRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.auth, () => message.auth = dependency_1.SafAuth.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.request, () => message.request = dependency_1.SafRequest.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): __ServiceName__HealthCheckRequest {
        return __ServiceName__HealthCheckRequest.deserialize(bytes);
    }
}
export class __ServiceName__HealthCheckResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: string;
        current_time?: dependency_2.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("current_time" in data && data.current_time != undefined) {
                this.current_time = data.current_time;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set status(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get current_time() {
        return pb_1.Message.getWrapperField(this, dependency_2.Timestamp, 2) as dependency_2.Timestamp;
    }
    set current_time(value: dependency_2.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_current_time() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        status?: string;
        current_time?: ReturnType<typeof dependency_2.Timestamp.prototype.toObject>;
    }): __ServiceName__HealthCheckResponse {
        const message = new __ServiceName__HealthCheckResponse({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.current_time != null) {
            message.current_time = dependency_2.Timestamp.fromObject(data.current_time);
        }
        return message;
    }
    toObject() {
        const data: {
            status?: string;
            current_time?: ReturnType<typeof dependency_2.Timestamp.prototype.toObject>;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.current_time != null) {
            data.current_time = this.current_time.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status.length)
            writer.writeString(1, this.status);
        if (this.has_current_time)
            writer.writeMessage(2, this.current_time, () => this.current_time.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): __ServiceName__HealthCheckResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new __ServiceName__HealthCheckResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.current_time, () => message.current_time = dependency_2.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): __ServiceName__HealthCheckResponse {
        return __ServiceName__HealthCheckResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class Unimplemented__ServiceName__HealthService {
    static definition = {
        HealthCheck: {
            path: "/__service_name__.health.v1.__ServiceName__Health/HealthCheck",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: __ServiceName__HealthCheckRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => __ServiceName__HealthCheckRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: __ServiceName__HealthCheckResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => __ServiceName__HealthCheckResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract HealthCheck(call: grpc_1.ServerUnaryCall<__ServiceName__HealthCheckRequest, __ServiceName__HealthCheckResponse>, callback: grpc_1.sendUnaryData<__ServiceName__HealthCheckResponse>): void;
}
export class __ServiceName__HealthClient extends grpc_1.makeGenericClientConstructor(Unimplemented__ServiceName__HealthService.definition, "__ServiceName__Health", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    HealthCheck: GrpcPromiseServiceInterface<__ServiceName__HealthCheckRequest, __ServiceName__HealthCheckResponse> = (message: __ServiceName__HealthCheckRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<__ServiceName__HealthCheckResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.HealthCheck(message, metadata, options, (error: grpc_1.ServiceError, response: __ServiceName__HealthCheckResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
