// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: __group_name__/index.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./__target_name__.ts";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class Unimplemented__ServiceName____GroupName__Service {
    static definition = {
        __TargetName____GroupName__: {
            path: "/__service_name__.__group_name__.v1.__ServiceName____GroupName__/__TargetName____GroupName__",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.__ServiceName____TargetName____GroupName__Request) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.__ServiceName____TargetName____GroupName__Request.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.__ServiceName____TargetName____GroupName__Response) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.__ServiceName____TargetName____GroupName__Response.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract __TargetName____GroupName__(call: grpc_1.ServerUnaryCall<dependency_1.__ServiceName____TargetName____GroupName__Request, dependency_1.__ServiceName____TargetName____GroupName__Response>, callback: grpc_1.sendUnaryData<dependency_1.__ServiceName____TargetName____GroupName__Response>): void;
}
export class __ServiceName____GroupName__Client extends grpc_1.makeGenericClientConstructor(Unimplemented__ServiceName____GroupName__Service.definition, "__ServiceName____GroupName__", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    __TargetName____GroupName__: GrpcPromiseServiceInterface<dependency_1.__ServiceName____TargetName____GroupName__Request, dependency_1.__ServiceName____TargetName____GroupName__Response> = (message: dependency_1.__ServiceName____TargetName____GroupName__Request, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.__ServiceName____TargetName____GroupName__Response> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.__TargetName____GroupName__(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.__ServiceName____TargetName____GroupName__Response) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
