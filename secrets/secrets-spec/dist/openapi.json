{
  "openapi": "3.0.0",
  "info": {
    "title": "Secrets API",
    "version": "1.0.0",
    "description": "API specification for template-service service"
  },
  "paths": {
    "/secrets": {
      "get": {
        "summary": "List all secrets",
        "operationId": "listSecrets",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of secrets to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of secrets to skip"
          },
          {
            "name": "is_active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by active status"
          }
        ],
        "responses": {
          "200": {
            "description": "List of secrets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/secret"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new secret",
        "operationId": "createSecret",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/secret-create-request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Secret created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/secret"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - secret with this name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/secrets/{id}": {
      "put": {
        "summary": "Update an existing secret",
        "operationId": "updateSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Secret ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/secret-update-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Secret updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/secret"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Secret not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - secret name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a secret (soft delete)",
        "operationId": "deleteSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Secret ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Secret deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Secret deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Secret not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - operation conflicts with current state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/access-requests": {
      "get": {
        "summary": "List all access requests",
        "operationId": "listAccessRequests",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of access requests to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of access requests to skip"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "granted",
                "denied"
              ]
            },
            "description": "Filter by status"
          },
          {
            "name": "service_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by service name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of access requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/access-request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/access-requests/{id}/approve": {
      "post": {
        "summary": "Approve or deny an access request",
        "operationId": "approveAccessRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Access request ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/approval-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/access-request"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Access request not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/service-tokens": {
      "get": {
        "summary": "List all service tokens",
        "operationId": "listServiceTokens",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of service tokens to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of service tokens to skip"
          },
          {
            "name": "approved",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Filter by approval status"
          },
          {
            "name": "service_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter by service name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of service tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/service-token"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    },
    "/service-tokens/{id}/approve": {
      "post": {
        "summary": "Approve or deny a service token",
        "operationId": "approveServiceToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Service token ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/approval-request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service token updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service-token"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - missing or invalid auth headers, or not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user does not have required privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Service token not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "$ref": "#/components/schemas/error"
      },
      "Secret": {
        "$ref": "#/components/schemas/secret"
      },
      "SecretCreateRequest": {
        "$ref": "#/components/schemas/secret-create-request"
      },
      "SecretUpdateRequest": {
        "$ref": "#/components/schemas/secret-update-request"
      },
      "ServiceToken": {
        "$ref": "#/components/schemas/service-token"
      },
      "AccessRequest": {
        "$ref": "#/components/schemas/access-request"
      },
      "ApprovalRequest": {
        "$ref": "#/components/schemas/approval-request"
      },
      "secret": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the secret",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Unique name for the secret",
            "example": "STRIPE_API_KEY"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the secret",
            "example": "Stripe API key for payment processing"
          },
          "masked_value": {
            "type": "string",
            "description": "Masked value for admin display (shows as ***)",
            "example": "***"
          },
          "created_at": {
            "type": "number",
            "description": "Timestamp when the secret was created",
            "example": 1640995200000
          },
          "updated_at": {
            "type": "number",
            "description": "Timestamp when the secret was last updated",
            "example": 1640995200000
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the secret is active",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "masked_value",
          "created_at",
          "updated_at",
          "is_active"
        ]
      },
      "error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "A short, machine-readable error code, for when HTTP status codes are not sufficient."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description of the error.",
            "example": "The requested resource could not be found."
          }
        }
      },
      "secret-create-request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name for the secret",
            "example": "STRIPE_API_KEY"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the secret",
            "example": "Stripe API key for payment processing"
          },
          "value": {
            "type": "string",
            "description": "The actual secret value to be encrypted",
            "example": "sk_test_1234567890abcdef"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "secret-update-request": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Updated description of the secret",
            "example": "Updated Stripe API key for payment processing"
          },
          "value": {
            "type": "string",
            "description": "New secret value to be encrypted",
            "example": "sk_test_9876543210fedcba"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether to activate or deactivate the secret",
            "example": true
          }
        }
      },
      "access-request": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the access request",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "secret_id": {
            "type": "string",
            "description": "ID of the secret being requested",
            "example": "secret-123"
          },
          "secret_name": {
            "type": "string",
            "description": "Name of the secret for display purposes",
            "example": "STRIPE_API_KEY"
          },
          "service_name": {
            "type": "string",
            "description": "Name of the service requesting access",
            "example": "identity-service"
          },
          "requested_at": {
            "type": "number",
            "description": "Timestamp when access was requested",
            "example": 1640995200000
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "granted",
              "denied"
            ],
            "description": "Status of the access request",
            "example": "pending"
          },
          "granted_at": {
            "type": "number",
            "nullable": true,
            "description": "Timestamp when granted, null if not granted",
            "example": 1640995200000
          },
          "granted_by": {
            "type": "string",
            "nullable": true,
            "description": "User who granted access, null if not granted",
            "example": "admin@example.com"
          },
          "access_count": {
            "type": "number",
            "description": "Number of times access has been used",
            "example": 5
          },
          "last_accessed_at": {
            "type": "number",
            "nullable": true,
            "description": "Timestamp of last access, null if never accessed",
            "example": 1640995200000
          }
        },
        "required": [
          "id",
          "secret_id",
          "secret_name",
          "service_name",
          "requested_at",
          "status",
          "access_count"
        ]
      },
      "approval-request": {
        "type": "object",
        "properties": {
          "approved": {
            "type": "boolean",
            "description": "True to approve, false to deny",
            "example": true
          },
          "approved_by": {
            "type": "string",
            "description": "User making the approval decision",
            "example": "admin@example.com"
          },
          "reason": {
            "type": "string",
            "description": "Optional reason for approval/denial",
            "example": "Approved for production use"
          }
        },
        "required": [
          "approved",
          "approved_by"
        ]
      },
      "service-token": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the service token",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "service_name": {
            "type": "string",
            "description": "Name of the service",
            "example": "identity-service"
          },
          "token_hash": {
            "type": "string",
            "description": "SHA-256 hash of the token (truncated for admin display)",
            "example": "a1b2c3d4e5f6..."
          },
          "service_version": {
            "type": "string",
            "description": "Optional version of the service",
            "example": "1.2.3"
          },
          "requested_at": {
            "type": "number",
            "description": "Timestamp when token was requested",
            "example": 1640995200000
          },
          "approved": {
            "type": "boolean",
            "description": "Whether the token is approved",
            "example": true
          },
          "approved_at": {
            "type": "number",
            "nullable": true,
            "description": "Timestamp when approved, null if not approved",
            "example": 1640995200000
          },
          "approved_by": {
            "type": "string",
            "nullable": true,
            "description": "User who approved the token, null if not approved",
            "example": "admin@example.com"
          },
          "last_used_at": {
            "type": "number",
            "nullable": true,
            "description": "Timestamp of last usage, null if never used",
            "example": 1640995200000
          },
          "access_count": {
            "type": "number",
            "description": "Number of times the token has been used",
            "example": 42
          }
        },
        "required": [
          "id",
          "service_name",
          "token_hash",
          "requested_at",
          "approved",
          "access_count"
        ]
      }
    }
  }
}