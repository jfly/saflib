// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: secrets/register-token.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "@saflib/grpc";
import * as pb_1 from "google-protobuf";
export enum RegisterTokenError {
    INVALID_REQUEST = 0
}
export class RegisterTokenRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        auth?: dependency_1.SafAuth;
        request?: dependency_1.SafRequest;
        service_name?: string;
        service_version?: string;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("auth" in data && data.auth != undefined) {
                this.auth = data.auth;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
            if ("service_name" in data && data.service_name != undefined) {
                this.service_name = data.service_name;
            }
            if ("service_version" in data && data.service_version != undefined) {
                this.service_version = data.service_version;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get auth() {
        return pb_1.Message.getWrapperField(this, dependency_1.SafAuth, 1) as dependency_1.SafAuth;
    }
    set auth(value: dependency_1.SafAuth) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_auth() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get request() {
        return pb_1.Message.getWrapperField(this, dependency_1.SafRequest, 2) as dependency_1.SafRequest;
    }
    set request(value: dependency_1.SafRequest) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_request() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get service_name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set service_name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get service_version() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set service_version(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        auth?: ReturnType<typeof dependency_1.SafAuth.prototype.toObject>;
        request?: ReturnType<typeof dependency_1.SafRequest.prototype.toObject>;
        service_name?: string;
        service_version?: string;
        token?: string;
    }): RegisterTokenRequest {
        const message = new RegisterTokenRequest({});
        if (data.auth != null) {
            message.auth = dependency_1.SafAuth.fromObject(data.auth);
        }
        if (data.request != null) {
            message.request = dependency_1.SafRequest.fromObject(data.request);
        }
        if (data.service_name != null) {
            message.service_name = data.service_name;
        }
        if (data.service_version != null) {
            message.service_version = data.service_version;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            auth?: ReturnType<typeof dependency_1.SafAuth.prototype.toObject>;
            request?: ReturnType<typeof dependency_1.SafRequest.prototype.toObject>;
            service_name?: string;
            service_version?: string;
            token?: string;
        } = {};
        if (this.auth != null) {
            data.auth = this.auth.toObject();
        }
        if (this.request != null) {
            data.request = this.request.toObject();
        }
        if (this.service_name != null) {
            data.service_name = this.service_name;
        }
        if (this.service_version != null) {
            data.service_version = this.service_version;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_auth)
            writer.writeMessage(1, this.auth, () => this.auth.serialize(writer));
        if (this.has_request)
            writer.writeMessage(2, this.request, () => this.request.serialize(writer));
        if (this.service_name.length)
            writer.writeString(3, this.service_name);
        if (this.service_version.length)
            writer.writeString(4, this.service_version);
        if (this.token.length)
            writer.writeString(5, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterTokenRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterTokenRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.auth, () => message.auth = dependency_1.SafAuth.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.request, () => message.request = dependency_1.SafRequest.deserialize(reader));
                    break;
                case 3:
                    message.service_name = reader.readString();
                    break;
                case 4:
                    message.service_version = reader.readString();
                    break;
                case 5:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RegisterTokenRequest {
        return RegisterTokenRequest.deserialize(bytes);
    }
}
export class RegisterTokenResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        success?: Success;
        error?: never;
    } | {
        success?: never;
        error?: RegisterTokenError;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("success" in data && data.success != undefined) {
                this.success = data.success;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get success() {
        return pb_1.Message.getWrapperField(this, Success, 1) as Success;
    }
    set success(value: Success) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_success() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get error() {
        return pb_1.Message.getFieldWithDefault(this, 2, RegisterTokenError.INVALID_REQUEST) as RegisterTokenError;
    }
    set error(value: RegisterTokenError) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_error() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "success" | "error";
        } = {
            0: "none",
            1: "success",
            2: "error"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        success?: ReturnType<typeof Success.prototype.toObject>;
        error?: RegisterTokenError;
    }): RegisterTokenResponse {
        const message = new RegisterTokenResponse({});
        if (data.success != null) {
            message.success = Success.fromObject(data.success);
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            success?: ReturnType<typeof Success.prototype.toObject>;
            error?: RegisterTokenError;
        } = {};
        if (this.success != null) {
            data.success = this.success.toObject();
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_success)
            writer.writeMessage(1, this.success, () => this.success.serialize(writer));
        if (this.has_error)
            writer.writeEnum(2, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterTokenResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterTokenResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.success, () => message.success = Success.deserialize(reader));
                    break;
                case 2:
                    message.error = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RegisterTokenResponse {
        return RegisterTokenResponse.deserialize(bytes);
    }
}
export class Success extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Success {
        const message = new Success({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Success {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Success();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Success {
        return Success.deserialize(bytes);
    }
}
