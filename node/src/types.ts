import { Logger } from "winston";

export interface Auth {
  userId: number;
  userEmail: string;
  userScopes: string[];
}

/**
 * Static, serializable context about what's currently going on.
 * These should always be available in backend systems.
 */
export interface SafContext {
  /*
   * Format: "{uuid}"
   * Generated by request instantiators server-side, so things like reverse proxies, async job services,
   * and http servers which are directly accessible by clients. Generally, grpc and http servers receive
   * a request ID and should use it to correlate requests across processes.
   */
  requestId: string;

  /*
   * Format: "{service}"
   * e.g. "auth", "payment", "logging", or the name of a product.
   * The name should match the docker service and npm package name.
   */
  serviceName: string;

  /*
   * Format: "{subsystem}"
   * e.g. "http" or "grpc". Can be namespaced, like:
   * - "http.email": an express router with apis that begin with /email/*
   * - "grpc.schedule": a gRPC service called "Schedule".
   * - "cron.clean": a set of cron jobs that regularly delete old data.
   * - "task.campaigns": async tasks queues associated with emails, SMS, etc.
   * - "ws.notifications": websocket for notifications.
   *
   * Basically, a single server or long-running "process".
   */
  subsystemName: string;

  /*
   * Format: "{method_name}"
   * e.g. "GetUser", such as operationId in OpenAPI, or rpc name in gRPC
   */
  operationName: string;

  /*
   * If the request is backed by an authenticated user, this will be set.
   * More info should be gotten directly from the auth service.
   */
  auth?: Auth;
}

// Taken from Sentry
export type ErrorLevels =
  | "fatal"
  | "error"
  | "warning"
  // | "log" // This one seems superfluous, and vague...
  | "info"
  | "debug";

/*
 * Subset of properties given to Sentry.
 * https://docs.sentry.io/platforms/javascript/guides/node/apis/#captureException
 *
 * Mainly missing fields that are or should be handled automatically.
 * - user
 * - contexts
 * - fingerprint
 * - tags
 */
export interface ErrorReportOptions {
  // default: error
  level?: ErrorLevels;
  extra?: Record<string, unknown>;
}

// The function application logic has access to for reporting errors.
export type ErrorReporter = (
  error: unknown, // Should be an Error, will throw an error if not
  options?: ErrorReportOptions,
) => void;

/*
 * Collectors take errors reported to them and propagate them to telemetry services such as Sentry.
 */
export interface ErrorCollectorParam {
  error: Error;

  user?: {
    id: number;
    ip_address?: string;
  };

  level: ErrorLevels;
  extra: Record<string, unknown>;
  tags: Record<string, string>;
}

export type ErrorCollector = (param: ErrorCollectorParam) => void;

/**
 * Clients for reporting various sorts of telemetry. They're expected to be instantiated with a SafContext,
 * so that context is included.
 */
export interface SafReporters {
  /*
   * The generic logger to use for this context. This is for leveled, message logs, for monitoring and debugging.
   */
  log: Logger;

  /*
   *
   */
  logError: ErrorReporter;

  // TODO: Product Events
  // TODO: Errors

  // Note: Metrics and spans are not expected to ever be included here. Libraries and services should
  // instantiate them and use them on their own. However! These reporters are expected to contribute
  // to spans, by adding product events, logs, and exceptions to spans. They don't currently do this, though.
}

/**
 * Convenience type for when the context needs to have auth.
 */
export interface SafContextWithAuth extends SafContext {
  auth: Auth;
}
