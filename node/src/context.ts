import { AsyncLocalStorage } from "async_hooks";
import { Logger } from "winston";
import { createLogger } from "./logger.ts";

export interface Auth {
  userId: number;
  userEmail: string;
  userScopes: string[];
}

export interface SafContext {
  // Context labels ------------------------------------------------------------
  // These are used in logs, metrics, and instrumentation generally to correlate, organize and... contextualize.

  /*
   * Format: "{uuid}"
   * Generated by request instantiators server-side, so things like reverse proxies, async job services,
   * and http servers which are directly accessible by clients. Generally, grpc and http servers receive
   * a request ID and should use it to correlate requests across processes.
   */
  requestId: string;

  /*
   * Format: "{service}.{subsystem}"
   * e.g. api.http or api.grpc.
   * The former name should match the docker service and npm package name, the latter should match a file in the package folder.
   */
  serviceName: string;

  /*
   * Format: "{method_name}"
   * e.g. "GetUser", such as operationId in OpenAPI, or rpc name in gRPC
   */
  operationName: string;

  /*
   * If the request is backed by an authenticated user, this will be set.
   * More info should be gotten directly from the auth service.
   */
  auth?: Auth;
  //  ----------------------------------------------------------------------------

  /*
   * The logger to use for this context.
   * It should be created with createLogger(serviceName, operationName).
   */
  log: Logger;
}

export interface SafContextWithAuth extends SafContext {
  auth: Auth;
}

const testContext: SafContext = {
  requestId: "no-request-id",
  log: createLogger("no-request-id"),
};

export const safStorage = new AsyncLocalStorage<SafContext>();

export const getSafContext = () => {
  const store = safStorage.getStore();
  if (!store && process.env.NODE_ENV === "test") {
    return testContext;
  }
  if (!store) {
    throw new Error("SafContext not found");
  }
  return store;
};

export const getSafContextWithAuth = (): SafContextWithAuth => {
  const store = safStorage.getStore();
  if (!store) {
    throw new Error("SafContext not found");
  }
  if (!store.auth) {
    throw new Error("Auth not found");
  }
  return store as SafContextWithAuth;
};
